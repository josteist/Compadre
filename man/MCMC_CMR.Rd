% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MCMC_CMR.R
\name{MCMC_CMR}
\alias{MCMC_CMR}
\title{An adaptive Markov chain Monte Carlo sampler for estimating parameters of a CMR_model.}
\usage{
MCMC_CMR(cmrModel, niter = 10000, nthin = 10, vmin = 0.001,
  draweps = niter/100, x0 = NULL,
  cvstp = (2.38/(sqrt(cmrModel$npar)))^2 * diag(vmin, cmrModel$npar),
  adapt = TRUE)
}
\arguments{
\item{cmrModel}{is a model generated with make.BayesCMR}

\item{niter}{is number of iterations. Defaults to 1e3.}

\item{nthin}{sets the thinning, i.e. samples for each nthin iterations are stored as output. Defaults to 10.}

\item{vmin}{sets the minimum and initial standard deviation of the normal proposals.}

\item{draweps}{number of iterations between each update of the proposal covariance matrix. Defaults to niter/100}

\item{cvstp}{Covariance structure for proposal. This is tuned during burnin. Defaults to (2.38/(sqrt(cmrModel$npar)))^2*diag(vmin,cmrModel$npar))}

\item{adapt}{Adapt the covariance proposals during first half?}

\item{x_init}{Potential initial values for the chain. Defaults to c(-4,-4,-4,rep(0,cmrModel$npar-3)).}
}
\value{
a fit structure with $Chain for samples, $Probs for posterior probabilities, $Accept number of accepted proposals in each block, $Model is the CMRmodel supplied as input, $Covs is the proposal covariance structure used in the last half of the chain.
}
\description{
After generating a model using \link{make.BayesCMR}, this function will sample the posterior. Default settings work relatively well for smaller models, but output needs to be checked for convergence (and more iterations are often necessary for models with many parameters). The sampler uses a covariance scaling to achieve good mixing. First half of the iterations are burning, and continually the proposals widths are tuned. The covariance structure of the samples in this burning phase is used for proposals in the latter half, insert ref here.
}
