fs[[1]]
fs
fs[,1]
plot(fs[,1])
fs <- lapply(1:3,function(ii){MCMC_CMR(m2,niter=1e4)})
summary(fs[[1]])
summary(fs[[2]])
fs <- lapply(1:3,function(ii){MCMC_CMR(m2,niter=3e5)})
summary(fs[[1]])
summary(fs[[2]])
plot(fs[[1]])
plot(fs[[1]],log=F)
plot(fs[[2]],log=F)
plot(fs[[3]],log=F)
plotN_sim(sim)
sim <- sim_BD_func()
library(COmpadre)
sim <- sim_BD_func()
library(Compadre)
sim <- sim_BD_func()
m1 <- make_BayesCMR_new(1*(sim$FosRec>0))
names(m1)
f1 <- lapply(1:4,function(ii){MCMC_CMR(m1,niter=2e4)})
# devtools::check()
setwd('C:/Users/josteist/Documents/R')
install('Compadre')
library(devtools)
setwd('C:/Users/josteist/Documents/R/Compadre')
document()
# devtools::check()
setwd('C:/Users/josteist/Documents/R')
install('Compadre')
library(Compadre)
sim <- sim_BD_func()
m1 <- make_BayesCMR_new(1*(sim$FosRec>0))
m1 <- make_BayesCMR(1*(sim$FosRec>0))
names(m1)
f1 <- lapply(1:4,function(ii){MCMC_CMR(m1,niter=2e4)})
summary(f1[[1]])
summary(f1[[2]])
summary(f1[[3]])
summary(f1[[4]])
plot(f1[[1]])
plot(f1[[2]])
plot(f1[[3]])
plot(f1[[4]])
m1$driverinx
m1$priorf
library(Compadre)
sim <- sim_BD_func()
m1 <- make_BayesCMR(1*(sim$FosRec>0))
names(m1)
f1 <- lapply(1:4,function(ii){MCMC_CMR(m1,niter=2e4)})
summary(f1[[1]])
f1
f1$Call
m1$call
make_BayesCMR
library(devtools)
setwd('C:/Users/josteist/Documents/R/Compadre')
document()
# devtools::check()
setwd('C:/Users/josteist/Documents/R')
install('Compadre')
library(Compadre)
m2 <- make_BayesCMR(1*(sim$FosRec>0))
m2$call
m1
m2
make_BayesCMR
# devtools::check()
setwd('C:/Users/josteist/Documents/R')
setwd('C:/Users/josteist/Documents/R/Compadre')
document()
setwd('C:/Users/josteist/Documents/R/Compadre')
document()
# devtools::check()
setwd('C:/Users/josteist/Documents/R')
remove.packages("Compadre")
# devtools::check()
setwd('C:/Users/josteist/Documents/R')
install('Compadre')
library(Compadre)
sim <- sim_BD_func()
m2 <- make_BayesCMR(1*(sim$FosRec>0))
names(m1)
f1 <- lapply(1:4,function(ii){MCMC_CMR(m1,niter=2e4)})
m2$priorf()
m2$priorf
f1 <- lapply(1:4,function(ii){MCMC_CMR(m1,niter=2e4)})
rts <- sapply(1:4,function(ii){summary(f1[[ii]])})
rts
plot(density(rts[,1]$SpecStat,from=0))
for (ii in 2:4){lines(density(rts[,ii]$SpecStat,from=0))}
density(rts[,1]$SpecStat
)
plot(density(rts[,1]$SpecStat))
plot(rts[,1])
rts[,1]
f1[[1]]$Chain[,1]
plot(f1[[1]]$Chain[,1])
plot(f1[[1]]$Chain[,1],type="l")
plot(f1[[1]]$Chain[,1],type="l",col=rgb(0.3,0.3,0.3,0.3))
for (ii in 2:4){lines(f1[[ii]]$Chain[,1],type="l",col=rgb(0.3,0.3,0.3,0.3))
}
m2 <- make_BayesCMR(1*(sim$FosRec>0),priorStd = dunif,
priorPars = list(list(0,10),list(-3,3),list(0,10)))
names(m1)
names(m2)
f1 <- lapply(1:4,function(ii){MCMC_CMR(m2,niter=2e4)})
plot(f1[[1]]$Chain[,1],type="l",col=rgb(0.3,0.3,0.3,0.3))
for (ii in 2:4){lines(f1[[ii]]$Chain[,1],type="l",col=rgb(0.3,0.3,0.3,0.3))
}
par(mfrow=c(1,3))
for (jj in 1:3){
plot(f1[[1]]$Chain[,jj],type="l",col=rgb(0.3,0.3,0.3,0.3))
for (ii in 2:4){lines(f1[[ii]]$Chain[,jj],type="l",col=rgb(0.3,0.3,0.3,0.3))}
}
par(mfrow=c(3,1))
for (jj in 1:3){
plot(f1[[1]]$Chain[,jj],type="l",col=rgb(0.3,0.3,0.3,0.3))
for (ii in 2:4){lines(f1[[ii]]$Chain[,jj],type="l",col=rgb(0.3,0.3,0.3,0.3))}
}
par(mfrow=c(3,1),mar=c(2,2,2,2))
for (jj in 1:3){
plot(f1[[1]]$Chain[,jj],type="l",col=rgb(0.3,0.3,0.3,0.3))
for (ii in 2:4){lines(f1[[ii]]$Chain[,jj],type="l",col=rgb(0.3,0.3,0.3,0.3))}
}
sim <- sim_BD_func_v2(spec = function(n,t){0.3-0.01*t},
ext  = 0.3)
sim <- sim_BD_func_v2(spec = function(n,t){0.3-0.01*t},
ext  = function(n,t){0.13})
m2 <- make_BayesCMR(1*(sim$FosRec>0),
spec=~time,
priorStd = dunif,
priorPars = list(list(0,10),list(-3,3),list(0,10)))
names(m2)
f1 <- lapply(1:4,function(ii){MCMC_CMR(m2,niter=1e5)})
rts <- sapply(1:4,function(ii){summary(f1[[ii]])})
summary(f1[[1]])
plot(f1[[1]])
plot(f1[[1]],log=F)
plotN_sim(sim)
par(mfrow=c(3,1),mar=c(2,2,2,2))
for (jj in 1:3){
plot(f1[[1]]$Chain[,jj],type="l",col=rgb(0.3,0.3,0.3,0.3))
for (ii in 2:4){lines(f1[[ii]]$Chain[,jj],type="l",col=rgb(0.3,0.3,0.3,0.3))}
}
rts <- sapply(1:4,function(ii){summary(f1[[ii]])})
sim <- sim_BD_func_v2(spec = function(n,t){0.3+0.1*sin(t)},
ext  = function(n,t){0.13})
m2 <- make_BayesCMR(1*(sim$FosRec>0),
spec=~time,
ext =~time,
samp=~time,
priorStd = dunif,
priorPars = list(list(0,10),list(-3,3),list(0,10)))
f1 <- lapply(1:4,function(ii){MCMC_CMR(m2,niter=4e5)})
rts <- sapply(1:4,function(ii){summary(f1[[ii]])})
par(mfrow=c(3,1),mar=c(2,2,2,2))
for (jj in 1:3){
plot(f1[[1]]$Chain[,jj],type="l",col=rgb(0.3,0.3,0.3,0.3))
for (ii in 2:4){lines(f1[[ii]]$Chain[,jj],type="l",col=rgb(0.3,0.3,0.3,0.3))}
}
checkchains(f1[[1]])
checkchains(f1[[2]])
checkchains(f1[[3]])
checkchains(f1[[4]])
plot(f1[[1]])
plot(f1[[2]])
plot(f1[[4]])
# Testing two interacting clades.
rm(list=ls())
library(Compadre)
set.seed(211080+2)
stages = GSA_timescale[GSA_timescale$scale_level==5,]
do = seq(70,58,by=-1)
# 90 to 8 is 'Phanerozoic'
stages[do,]$interval_name
drivers <- Proxies[do,] # not driver for last bin
dts = stages[do,]$max_ma-stages[do,]$min_ma
names(dts) <- stages[do,]$interval_name
Obs = (t(Occ_species>0))[,do]
Obs <- Obs[which(rowSums(Obs)>0),]
dim(Obs)
m1 <- make_BayesCMR_new(Obs,dts,spec=~div*SeaLev,ext = ~time,samp = ~time,data=drivers,model='I')
dim(Obs)
m1 <- make_BayesCMR(Obs,dts,spec=~div*SeaLev,ext = ~time,samp = ~time,data=drivers,model='I')
m2 <- make_BayesCMR(Obs,dts,spec=~div*SeaLev,ext = ~time,samp = ~time,data=drivers,model='II')
m3 <- make_BayesCMR(Obs,dts,spec=~div*SeaLev,ext = ~time,samp = ~time,data=drivers,model='III')
m4 <- make_BayesCMR(Obs,dts,spec=~div*SeaLev,ext = ~time,samp = ~time,data=drivers,model='IV')
m5 <- make_BayesCMR(Obs,dts,spec=~div*SeaLev,ext = ~time,samp = ~time,data=drivers,model='V')
ft <- MCMC_CMR(m1,niter=1e5,vmin=1e-3)
plot(ft)
summary(ft)
checkchains(ft)
ft <- MCMC_CMR(m1,niter=1e5,vmin=1e-5)
summary(ft)
checkchains(ft)
library(parallel)
m1 <- make_BayesCMR(Obs,dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='I')
m2 <- make_BayesCMR(Obs,dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='II')
m3 <- make_BayesCMR(Obs,dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='III')
m4 <- make_BayesCMR(Obs,dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='IV')
m5 <- make_BayesCMR(Obs,dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='V')
mods = c(m1,m2,m3,m4,m5)
cl <- makeCluster(6)
clusterEvalQ(cl,library(Compadre))
clusterExport(cl,c("mods"))
myParlfun1 <- function(jj){MCMC_CMR(mods[[ii]],niter=1e4)}
fits  <- parLapply(cl,1:3,myParlfun1)
myParlfun1 <- function(ii){MCMC_CMR(mods[[ii]],niter=1e4)}
fits  <- parLapply(cl,1:3,myParlfun1)
mods
MCMC_CMR(mods[[1]])
mods = list(m1,m2,m3,m4,m5)
clusterExport(cl,c("mods"))
myParlfun1 <- function(ii){MCMC_CMR(mods[[ii]],niter=1e4)}
fits  <- parLapply(cl,1:3,myParlfun1)
fits
summary(fits[[1]])
myParlfun1 <- function(ii){MCMC_CMR(mods[[ii]],niter=5e5)}
fits  <- parLapply(cl,1:3,myParlfun1)
summary(fits[[1]])
summary(fits[[2]])
plot(fits[[1]])
plot(fits[[2]])
plot(fits[[3]])
tmp <- sapply(1:length(fits),function(ii){
plot(fits[[ii]],drawplot=F)})
tmp
tmp[,1]$SpecRates
apply(tmp[,1]$SpecRates,1,median)
sapply(1:length(fits),function(ii){
apply(tmp[,ii]$SpecRates,1,median)})
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$SpecRates,1,median)}),type="l")
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$SpecRates,1,median)}),type="l",col='grey')
par(mfrow=c(1,3))
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$SpecRates,1,median)}),type="l",col='grey')
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$ExtRates,1,median)}),type="l",col='grey')
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$SampRates,1,median)}),type="l",col='grey')
par(mfrow=c(3,1))
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$SpecRates,1,median)}),type="o",col='grey')
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$ExtRates,1,median)}),type="o",col='grey')
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$SampRates,1,median)}),type="o",col='grey')
checkchains(fits[[1]])
checkchains(fits[[2]])
checkchains(fits[[3]])
checkchains(fits[[4]])
stages[do,]
do = seq(40,23,by=-1)
stages[do,]$interval_name
do = seq(40,23,by=-1)
# 90 to 8 is 'Phanerozoic'
stages[do,]$interval_name
drivers <- Proxies[do,] # not driver for last bin
dts = stages[do,]$max_ma-stages[do,]$min_ma
names(dts) <- stages[do,]$interval_name
Obs = (t(Occ_species>0))[,do]
Obs <- Obs[which(rowSums(Obs)>0),]
m1 <- make_BayesCMR(Obs,dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='I')
m2 <- make_BayesCMR(Obs,dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='II')
m3 <- make_BayesCMR(Obs,dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='III')
m4 <- make_BayesCMR(Obs,dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='IV')
m5 <- make_BayesCMR(Obs,dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='V')
mods = list(m1,m2,m3,m4,m5)
clusterExport(cl,c("mods"))
myParlfun1 <- function(ii){MCMC_CMR(mods[[ii]],niter=5e5)}
fits  <- parLapply(cl,1:4,myParlfun1)
tmp <- sapply(1:length(fits),function(ii){
plot(fits[[ii]],drawplot=F)})
par(mfrow=c(3,1))
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$SpecRates,1,median)}),type="o",col='grey')
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$ExtRates,1,median)}),type="o",col='grey')
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$SampRates,1,median)}),type="o",col='grey')
plot(fits[[1]])
plot(fits[[2]])
plot(fits[[1]],log=F)
plot(fits[[2]],log=F)
myf <- function(ii){c(mean(ii),quantile(ii,c(0.025,0.5,0.975)))}
myf(tmp[,1]$SampRates[,1])
dim(tmp[,1]$SampRates)
myf(tmp[,1]$SampRates[1,])
sapply(1:4,function(ii){myf(tmp[,ii]$SampRates[1,])})
sapply(1:4,function(ii){myf(tmp[,ii]$SpecRates[1,])})
par(mfrow=c(3,1))
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$SpecRates,1,median)}),type="o",col='grey')
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$ExtRates,1,median)}),type="o",col='grey')
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$SampRates,1,median)}),type="o",col='grey')
bml1 <- doBML(fits[[1]])
bml1
bml1$logBML
bml1 <- sapply(1:4,
function(ii){replicate(10,doBML(fits[[ii]])$logBML)})
bml1
boxplot(bml1)
plot(fits[[1]])
summary(fits[[1]])
checkchains(fits[[1]])
checkchains(fits[[2]])
checkchains(fits[[3]])
checkchains(fits[[4]])
MCMC_CMR
do = seq(23,5,by=-1)
# 90 to 8 is 'Phanerozoic'
stages[do,]$interval_name
drivers <- Proxies[do,] # not driver for last bin
dts = stages[do,]$max_ma-stages[do,]$min_ma
names(dts) <- stages[do,]$interval_name
Obs = (t(Occ_species>0))[,do]
Obs <- Obs[which(rowSums(Obs)>0),]
m1 <- make_BayesCMR(Obs,dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='I')
m2 <- make_BayesCMR(Obs,dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='II')
m3 <- make_BayesCMR(Obs,dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='III')
m4 <- make_BayesCMR(Obs,dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='IV')
m5 <- make_BayesCMR(Obs,dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='V')
mods = list(m1,m2,m3,m4,m5)
cl <- makeCluster(6)
clusterEvalQ(cl,library(Compadre))
clusterExport(cl,c("mods"))
myParlfun1 <- function(ii){MCMC_CMR(mods[[ii]],niter=1e6,vmin=1e-5)}
fits  <- parLapply(cl,1:4,myParlfun1)
tmp <- sapply(1:length(fits),function(ii){
plot(fits[[ii]],drawplot=F)})
par(mfrow=c(3,1))
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$SpecRates,1,median)}),type="o",col='grey')
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$ExtRates,1,median)}),type="o",col='grey')
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$SampRates,1,median)}),type="o",col='grey')
bml1 <- sapply(1:4,
function(ii){replicate(10,doBML(fits[[ii]])$logBML)})
boxplot(bml1)
par(mrow=c(2,2))
par(mfrow=c(2,2))
for (ii in 1:4){hist(ESS(fits[[ii]]))}
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$SpecRates,1,median)}),type="o",col='grey')
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$ExtRates,1,median)}),type="o",col='grey')
matplot(sapply(1:length(fits),function(ii){
apply(tmp[,ii]$SampRates,1,median)}),type="o",col='grey')
sapply(1:4,function(ii){myf(tmp[,ii]$SpecRates[1,])})
sapply(1:4,function(ii){myf(tmp[,ii]$SpecRates[10,])})
sapply(1:4,function(ii){quantile(tmp[,ii]$SpecRates[1,],c(0.025,0.975))})
m1$modeltype$inx
m1$inx
m1$inx$specReInx
length(m1$inx$specReInx)
dts
?step
js <- seq(0,sum(dts),by=0.01)
plot(js,stepfun(0,cumsum(dts)),1/10*round(runif(length(dts)+1)*5))
plot(js,stepfun(0,cumsum(dts)),1/10*round(runif(length(dts)+2)*5))
plot(js,stepfun(c(0,cumsum(dts)),1/10*round(runif(length(dts)+1))))
plot(js,stepfun(c(0,cumsum(dts)),1/10*round(runif(length(dts)+2))))
myf <- stepfun(c(0,cumsum(dts)),1/10*round(runif(length(dts)+2))))
myf <- stepfun(c(0,cumsum(dts)),1/10*round(runif(length(dts)+2)))
myf(0)
plot(seq(0,sum(dts),by=0.1),myf)
plot(seq(0,sum(dts),by=0.1),myf(seq(0,sum(dts),by=0.1))
)
myf <- stepfun(c(0,cumsum(dts)),1/10*round(1+5*runif(length(dts)+2)))
)
plot(seq(0,sum(dts),by=0.1),myf(seq(0,sum(dts),by=0.1)))
myf <- stepfun(c(0,cumsum(dts)),1/10*round(runif(length(dts)+2)))
myf <- stepfun(c(0,cumsum(dts)),1/10*round(runif(length(dts)+2)))
plot(myf)
myf <- stepfun(c(0,cumsum(dts)),1/10*round(1+5*runif(length(dts)+2)))
plot(myf)
sim1 <- sim_BD_func_v2(spec = function(t,n){myf(t)},
ext  = function(t,n){0.2}
samp = 0.3)
sim1 <- sim_BD_func_v2(spec = function(t,n){myf(t)},
ext  = function(t,n){0.2},
samp = 0.3)
plotN_sim(sim1)
sim1 <- sim_BD_func_v2(spec = function(t,n){myf(t)},
ext  = function(t,n){0.2},
samp = 0.3,
dt_ints = dts)
dev.off()
plotN_sim(sim1)
dim(sim1$FosRec)
plot(colSums(sim1$FosRec>0),type="o")
plot(colSums(sim1$FosRec>0)/dts,type="o")
ms1 <- make_BayesCMR(1*(sim1$FosRec>0),dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='I')
ms2 <- make_BayesCMR(1*(sim1$FosRec>0),dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='II')
ms3 <- make_BayesCMR(1*(sim1$FosRec>0),dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='III')
ms4 <- make_BayesCMR(1*(sim1$FosRec>0),dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='IV')
ms5 <- make_BayesCMR(1*(sim1$FosRec>0),dts,spec=~time,ext = ~time,samp = ~time,data=drivers,model='V')
modss = list(ms1,ms2,ms3,ms4,ms5)
cl <- makeCluster(6)
clusterEvalQ(cl,library(Compadre))
clusterExport(cl,c("modss"))
myParlfun1 <- function(ii){MCMC_CMR(modss[[ii]],niter=1e6,vmin=1e-5)}
fits  <- parLapply(cl,1:4,myParlfun1)
checkchains(fits[[1]])
checkchains(fits[[2]])
myParlfun1 <- function(ii){MCMC_CMR(modss[[ii]],niter=5e6,vmin=1e-5,nobloc=500)}
fitss  <- parLapply(cl,1:4,myParlfun1)
MCMC_CMR
myParlfun1 <- function(ii){MCMC_CMR(modss[[ii]],
niter=5e6,vmin=1e-5,nbloc=500)}
fitss  <- parLapply(cl,1:4,myParlfun1)
myParlfun1 <- function(ii){MCMC_CMR(modss[[ii]],
niter=5e6,vmin=1e-5,noblc=500)}
fitss  <- parLapply(cl,1:4,myParlfun1)
checkchains(fitss[[1]])
summary(fitss[[1]])
summary(fitss[[2]])
summary(fitss[[3]])
summary(fitss[[4]])
myParlfun1 <- function(ii){MCMC_CMR(modss[[ii]],
niter=1e7,nthin=1000,vmin=1e-5,noblc=500)}
fitss  <- parLapply(cl,1:4,myParlfun1)
length(fitss)
checkchains(fitss[[1]])
checkchains(fitss[[2]])
checkchains(fitss[[3]])
checkchains(fitss[[4]])
summary(fitss[[1]])
summary(fitss[[2]])
summary(fitss[[3]])
summary(fitss[[4]])
dim(fitss[[1]]$Model$Obs)
head(Obs)
dim(fitss[[1]]$Model$dts)
length(fitss[[1]]$Model$dts)
library(Compadre)
# Try interactive stf.
Obs_M <- Occ_genera[,which(Taxonomy_genera$phylum == 'Mollusca')]
Obs_B <- Occ_genera[,which(Taxonomy_genera$phylum %in% c('Brachiopoda'))]
Obs_B <- Occ_genera[,which(Taxonomy_genera$phylum %in% c('Brachiopoda'))]
do <- seq(80,40,by=-1)
stages[do,]$interval_name
do <- seq(80,40,by=-1)
stages[do,]$interval_name
# Try interactive stf.
stages = GSA_timescale[GSA_timescale$scale_level==5,]
stages[do,]$interval_name
drivers <- Proxies[do,] # not driver for last bin
dts = stages[do,]$max_ma-stages[do,]$min_ma
names(dts) <- stages[do,]$interval_name
Obs_M <- Obs_M[do,]
Obs_M <- Obs_M[,which(colSums(Obs_M)>0)]
Obs_B <- Obs_B[do,]
Obs_B <- Obs_B[,which(colSums(Obs_B)>0)]
plot(rowSums(Obs_M>0),type="o")
lines(rowSums(Obs_B>0),type="o",col='red')
do <- seq(70,40,by=-1)
stages[do,]$interval_name
drivers <- Proxies[do,] # not driver for last bin
dts = stages[do,]$max_ma-stages[do,]$min_ma
names(dts) <- stages[do,]$interval_name
Obs_M <- Obs_M[do,]
Obs_M <- Obs_M[,which(colSums(Obs_M)>0)]
Obs_M <- Occ_genera[,which(Taxonomy_genera$phylum == 'Mollusca')]
Obs_B <- Occ_genera[,which(Taxonomy_genera$phylum %in% c('Brachiopoda'))]
do <- seq(70,40,by=-1)
stages[do,]$interval_name
drivers <- Proxies[do,] # not driver for last bin
dts = stages[do,]$max_ma-stages[do,]$min_ma
names(dts) <- stages[do,]$interval_name
Obs_M <- Obs_M[do,]
Obs_M <- Obs_M[,which(colSums(Obs_M)>0)]
Obs_B <- Obs_B[do,]
Obs_B <- Obs_B[,which(colSums(Obs_B)>0)]
plot(rowSums(Obs_M>0),type="o")
lines(rowSums(Obs_B>0),type="o",col='red')
m1D <- make_BayesCMR_2clades(t(1*(Obs_M>0)),t(1*(Obs_B>0)),dts=dts,                            spec1=~time+div1+div2,                            spec2=~time+div1+div2,                          modeltype = "I")
m2D <- make_BayesCMR_2clades(t(1*(Obs_M>0)),t(1*(Obs_B>0)),dts=dts,                            spec1=~time+div1+div2,                            spec2=~time+div1+div2,                          modeltype = "II")
m3D <- make_BayesCMR_2clades(t(1*(Obs_M>0)),t(1*(Obs_B>0)),dts=dts,                            spec1=~time+div1+div2,                            spec2=~time+div1+div2,                          modeltype = "III")
m4D <- make_BayesCMR_2clades(t(1*(Obs_M>0)),t(1*(Obs_B>0)),dts=dts,                            spec1=~time+div1+div2,                            spec2=~time+div1+div2,                          modeltype = "IV")
modsD <- list(m1D,m2D,m3D,m4D)
library(parallel)
cl <- makeCluster(6)
clusterEvalQ(cl,library(Compadre))
clusterExport(cl,c("modsD"))
myParlfun3 <- function(jj){MCMC_CMR(modsD[[jj]],niter=1e6,vmin=1e-5,nthni=100,noblc=1000)}
fitsBM <- parLapply(cl,1:4,myParlfun3)
myParlfun3 <- function(jj){MCMC_CMR(modsD[[jj]],niter=1e6,vmin=1e-5,nthin=100,noblc=1000)}
fitsBM <- parLapply(cl,1:4,myParlfun3)
summary(fitsBM[[1]])
checkchains(fitsBM[[1]])
checkchains(fitsBM[[2]])
checkchains(fitsBM[[3]])
checkchains(fitsBM[[4]])
library(devtools)
setwd('C:/Users/josteist/Documents/R/Compadre')
document()
setwd('C:/Users/josteist/Documents/R/Compadre')
document()
# devtools::check()
setwd('C:/Users/josteist/Documents/R')
install('Compadre')
library(Compadre)
