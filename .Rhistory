f1_x <- MCMC_CMR(m1_x,niter=2e5)
matplot(f1_x$Chain[,1:2],type="l")
matplot(f1$Chain[,1:2],type="l")
plot(f1)
plot(f1_x)
library(Compadre)
library('Compadre')
library(devtools)
setwd("C:/Users/josteist/Documents/Compadre")
document()
setwd("C:/Users/josteist/Documents/")
install('Compadre')
library(Compadre)
S2 <- sim_BD_func_v2(spec=function(t,n){.23+sin(t)*0.1},#max(1e-8,0.8-0.1*log(n))},
ext = function(t,n){.2+sin(t-pi/2)*0.07},#0.4-.3*(t>12)},
samp = function(t,n){3.3},n_init=100,
dt_ints=rep(0.5,20))#rep(c(.5,4),6))
S1 <- sim_BD_func_v2(spec=function(t,n){.53+sin(t)*0.3},#max(1e-8,0.8-0.1*log(n))},
ext = function(t,n){.4+sin(t-pi/2)*0.07},#0.4-.3*(t>12)},
samp = function(t,n){3.3},n_init=100,
dt_ints=rep(0.5,20))#rep(c(.5,4),6))
f1 <- MCMC_CMR(m2,x0=runif(m2$npar,min=-.1,max=.1),niter=1e6)
m2 <- make_BayesCMR_2clades(Obs1 = 1*(S1$FosRec>0),
Obs2 = 1*(S2$FosRec>0),dts=S2$dts)
f1 <- MCMC_CMR(m2,x0=runif(m2$npar,min=-.1,max=.1),niter=1e6)
matplot(f1$Chain[,m2$clade1inx[1:3]],type="l2)")
matplot(f1$Chain[,m2$clade1inx[1:3]],type="l")
matplot(exp(f1$Chain[,m2$clade1inx[1:3]],type="l"))
matplot(exp(f1$Chain[,m2$clade1inx[1:3]]),type="l")
matplot(exp(f1$Chain[,m2$clade2inx[1:3]]),type="l")
m2$intinx
matplot(f1$Chain[,m2$intinx],type="l")
matplot(f1$Chain[,m2$intinx[1:3]],type="l")
matplot(f1$Chain[,m2$intinx[4:6]],type="l")
rm(list=ls())
# PNAS_201702297/FinalData/DiscreteTimeSeries.csv
tmptxt <- getURL('https://raw.githubusercontent.com/UW-Macrostrat/PNAS_201702297/master/FinalData/ContinuousTimeSeries.csv', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
# Making a script that captures ALL time series of environmental proxies::
library(RCurl)
# PNAS_201702297/FinalData/DiscreteTimeSeries.csv
tmptxt <- getURL('https://raw.githubusercontent.com/UW-Macrostrat/PNAS_201702297/master/FinalData/ContinuousTimeSeries.csv', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
Fragm <- read.csv(textConnection(tmptxt),header=T) # Parsing the text
# THis assumes stages is defined;
# stages <- GSA_timescale[GSA_timescale$scale_level==5,]
myfa <- splinefun(Fragm[,1],Fragm[,2],method='fmm')
FR_ZF <- sapply(1:dim(stages)[1],function(ii){
mean(myfa(seq(stages[ii,]$min_ma,stages[ii,]$max_ma,by=0.01)))})
# SO this is the fragmentation index average inside stages
plot(Fragm[,1],Fragm[,2],type="l")
lines(stages$min_ma/2 + stages$max_ma/2, FR_ZF,col='red',type="o")
library(Compadre)
GTS2012
stages = GSA_timescale[GSA_timescale$scale_no==5,]
head(stages)
head(GSA_timescale)
stages = GSA_timescale[GSA_timescale$scale_level==5,]
dim(stages)
# THis assumes stages is defined;
# stages <- GSA_timescale[GSA_timescale$scale_level==5,]
myfa <- splinefun(Fragm[,1],Fragm[,2],method='fmm')
FR_ZF <- sapply(1:dim(stages)[1],function(ii){
mean(myfa(seq(stages[ii,]$min_ma,stages[ii,]$max_ma,by=0.01)))})
plot(Fragm[,1],Fragm[,2],type="l")
lines(stages$min_ma/2 + stages$max_ma/2, FR_ZF,col='red',type="o")
SL <- read.csv('C:/Users/josteist/Documents/Databases/AbioticProxyseries/ForRpack/Cardenas_Harries_TableS3_Sealevel_5myr.csv')
# Making a simple splineinterpolation.
# COuld try others...
myfa <- splinefun(SL[,1],SL[,2],method='fmm')
plot(seq(500,0,by=-0.1),myfa(seq(500,0,by=-0.1)),type="l")
points(SL[,1],SL[,2],col='red')
SL_CH <- sapply(1:dim(stages)[1],function(ii){
mean(myfa(seq(stages[ii,]$min_ma,stages[ii,]$max_ma,by=0.01)))})
plot(c(0,0),xlim=c(500,0),ylim=c(0,100))
plot(c(-10,-10),xlim=c(500,0),ylim=c(0,100))
for (ii in 1:100){
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,0,col=toString(stages[ii,]$color))
}
stages[10,]$color
paste0(stages[10,]$color,50)
rect(400,0,300,10paste0(stages[10,]$color,50)
rect(400,0,300,10,paste0(stages[10,]$color,50))
rect(400,0,300,10,paste0(stages[10,]$color,10))
rect(400,0,300,10,paste0(stages[10,]$color,DD))
rect(400,0,300,10,paste0(stages[10,]$color,'FF'))
rect(400,0,300,30,paste0(stages[10,]$color,'FF'))
2rgb
col2rgb(stages[10,]$color)
rgb(col2rgb(stages[10,]$color),50)
rect(400,0,300,30,rgb(col2rgb(stages[10,]$color)/255,0.3)
)
rgb(col2rgb(stages[10,]$color)
col2rgb(stages[10,]$color)
col2rgb(stages[10,]$color)[1,2,3]
?col2rgb
?rect
for (ii in 1:100){
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,0,col=paste0(toString(stages[ii,]$color),30))
}
for (ii in 1:100){
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,100,col=paste0(toString(stages[ii,]$color),30))
}
for (ii in 1:100){
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,100,col=paste0(toString(stages[ii,]$color),30),border=NA)
}
plot(c(-10,-10),xlim=c(500,0),ylim=c(0,100),ylab='Sea level curve')
for (ii in 1:100){
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,100,col=paste0(toString(stages[ii,]$color),30),border=NA)
}
plot(c(-10,-10),xlim=c(500,0),ylim=c(0,100),ylab='Sea level curve')
for (ii in 1:100){
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,0,col=toString(stages[ii,]$color))
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,100,col=paste0(toString(stages[ii,]$color),30),border=NA)
}
plot(c(-10,-10),xlim=c(500,0),ylim=c(0,100),ylab='Sea level curve')
for (ii in 1:100){
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,0,col=toString(stages[ii,]$color))
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,400,col=paste0(toString(stages[ii,]$color),50),border=NA)
}
lines(seq(500,0,by=-0.1),myfa(seq(500,0,by=-0.1)),type="l")
points(SL[,1],SL[,2],col='red')
# SO this is the fragmentation index average inside stages
plot(c(-10,-10),xlim=c(500,0),ylim=c(0,1),ylab='Sea level curve')
for (ii in 1:100){
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,0,col=toString(stages[ii,]$color))
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,400,col=paste0(toString(stages[ii,]$color),50),border=NA)
}
lines(Fragm[,1],Fragm[,2],type="l")
lines(stages$min_ma/2 + stages$max_ma/2, FR_ZF,col='red',type="o")
# SO this is the fragmentation index average inside stages
plot(c(-10,-10),xlim=c(500,0),ylim=c(0.4,.6),ylab='Sea level curve')
# SO this is the fragmentation index average inside stages
plot(c(-10,-10),xlim=c(500,0),ylim=c(0.4,.6),ylab='Fragmentation index')
for (ii in 1:100){
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,0,col=toString(stages[ii,]$color))
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,400,col=paste0(toString(stages[ii,]$color),50),border=NA)
}
lines(Fragm[,1],Fragm[,2],type="l")
lines(stages$min_ma/2 + stages$max_ma/2, FR_ZF,col='red',type="o")
# SO this is the fragmentation index average inside stages
plot(c(-10,-10),xlim=c(500,0),ylim=c(0.3,.6),ylab='Fragmentation index')
for (ii in 1:100){
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,0,col=toString(stages[ii,]$color))
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,400,col=paste0(toString(stages[ii,]$color),50),border=NA)
}
lines(Fragm[,1],Fragm[,2],type="l")
lines(stages$min_ma/2 + stages$max_ma/2, FR_ZF,col='red',type="o")
par("usr")
for (ii in 1:100){
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,par("usr")[3],col=toString(stages[ii,]$color))
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,400,col=paste0(toString(stages[ii,]$color),50),border=NA)
}
# SO this is the fragmentation index average inside stages
plot(c(-10,-10),xlim=c(500,0),ylim=c(0.3,.6),ylab='Fragmentation index')
for (ii in 1:100){
# rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,par("usr")[3],col=toString(stages[ii,]$color))
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,400,col=paste0(toString(stages[ii,]$color),50),border=NA)
}
for (ii in 1:100){
# rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,par("usr")[3],col=toString(stages[ii,]$color))
rect(stages[ii,]$max_ma,par("usr")[3],stages[ii,]$min_ma,400,col=paste0(toString(stages[ii,]$color),50),border=NA)
}
lines(Fragm[,1],Fragm[,2],type="l")
lines(stages$min_ma/2 + stages$max_ma/2, FR_ZF,col='red',type="o")
rm(list=ls())
library(devtools)
# mmc2 is the 'surface' data, which we will use.
# None of these are 'adjusted' in sheet 2.
vp2 <- as.data.frame(read_excel("C:/Users/josteist/Documents/Databases/VeizerProkoph2015/tmpmmc2.xlsx",sheet=2))
tmp2 <- data.frame(vp2$gts2004,vp2$gts2012,vp2$d13C,vp2$d18O,
vp2$`87sr/86Sr`,vp2$fossil,vp2$Location,vp2$climate)
for (jj in 4:(length(excel_sheets("C:/Users/josteist/Documents/Databases/VeizerProkoph2015/tmpmmc2.xlsx")))){
vp2 <- as.data.frame(read_excel("C:/Users/josteist/Documents/Databases/VeizerProkoph2015/tmpmmc2.xlsx",sheet=jj))
tmp <- data.frame(vp2$gts2004,vp2$gts2012,vp2$d13C,vp2$d18O,
vp2$`87sr/86Sr`,vp2$fossil,vp2$Location,vp2$climate)
tmp2 <- rbind(tmp2,tmp)
}
# 1 - Locate all tropical and subtropical datapoints.
Alltropix <- unique(sort(c(grep('trop',unique(tmp2$vp2.climate),ignore.case=T),
grep('equ',unique(tmp2$vp2.climate),ignore.case=T),
grep('Deep',unique(tmp2$vp2.climate),ignore.case=T),
grep('Indik',unique(tmp2$vp2.climate),ignore.case=T))))
# 2. Which of these are subtropical and which are tropical.
subtropix <- intersect(unique(sort(c(grep('strop',unique(tmp2$vp2.climate),ignore.case=T),
grep('subt',unique(tmp2$vp2.climate),ignore.case=T),
grep('-s',unique(tmp2$vp2.climate),ignore.case=T),
grep('trops',unique(tmp2$vp2.climate),ignore.case=T)))),
Alltropix)
unique(tmp2$vp2.climate)[subtropix]
unique(tmp2$vp2.climate)[setdiff(tropix,subtropix)]
tropix <- setdiff(Alltropix,subtropix)
# 3 - Find Artic and antarctic.
arctix <- unique(sort(c(grep('arct',unique(tmp2$vp2.climate),ignore.case=T),
grep('acti',unique(tmp2$vp2.climate),ignore.case=T))))
# 4 - Find temperate.
tempix <- unique(sort(c(grep('temp',unique(tmp2$vp2.climate),ignore.case=T),
grep('mid',unique(tmp2$vp2.climate),ignore.case=T),
grep('medit',unique(tmp2$vp2.climate),ignore.case=T),
grep('Atl-South',unique(tmp2$vp2.climate),ignore.case=T))))
# Are any sets found in more than 1 category?
diff(sort(c(subtropix,tropix,arctix,tempix)))
# Temp-Indik, temperate data from the Indian ocean I presume. Set to temperate
tropix = setdiff(tropix,9)
unique(tmp2$vp2.climate)[9]
tmp2$Climate = NA;
tmp2$Climate[which(tmp2$vp2.climate %in% unique(tmp2$vp2.climate)[tropix])] = 'Tropical'
tmp2$Climate[which(tmp2$vp2.climate %in% unique(tmp2$vp2.climate)[tempix])] = 'Temperate'
tmp2$Climate[which(tmp2$vp2.climate %in% unique(tmp2$vp2.climate)[arctix])] = 'Arctic/Antarctic'
tmp2$Climate[which(tmp2$vp2.climate %in% unique(tmp2$vp2.climate)[subtropix])] = 'Sub-tropical'
table(tmp2$Climate)
# We will only use tropical and sub-tropical (low latitude data)
ix <- c( which(tmp2$Climate=='Tropical'),
which(tmp2$Climate=='Sub-tropical'),
which(tmp2$Climate=='Temperate'))
DataIsotop <- tmp2[ix,];
# Gradstein timescale 2004
GTS2004 <- c(0,0.0115,             0.126,             0.781,             1.806,             2.588,             3.6,             5.332,             7.246,             11.608,             13.65,             15.97,             20.43,             23.03,             28.4,             33.9,             37.2,             40.4,             48.6,             55.8,             58.7,             61.7,             65.5,             70.6,             83.5,             85.8,             89.3,             93.5,             99.6,             112,             125,             130,             136.4,             140.2,             145.5,             150.8,             155.7,             161.2,             164.7,             167.7,             171.6,             175.6,             183,             189.6,             196.5,             199.6,             203.6,             216.5,             228,             237,             245,             249.7,             251,             253.8,             260.4,             265.8,             268,             270.6,             275.6,             284.4,             294.6,             299,             303.9,             306.5,             311.7,             318.1,             326.4,             345.3,             359.2,             374.5,             385.3,             391.8,             397.5,             407,             411.2,             416,             418.7,             421.3,             422.9,             426.2,             428.2,             436,             439,             443.7,             445.6,             455.8,             460.9,             468.1,             471.8,             478.6,             488.3)
# Also the current timescale (GTS 2012) from pbdb
stages = GSA_timescale[GSA_timescale$scale_level==5,]; # Stages.
GTS2012 <- unique(stages[1:91,]$min_ma);
# ONly use the first
which(is.na(DataIsotop$vp2.gts2012))
tmp_gsa2012 <- sapply(which(is.na(DataIsotop$vp2.gts2012)),
function(ii){rescale.time(GTS2004,
GTS2012,DataIsotop$vp2.gts2004[ii])})
DataIsotop[which(is.na(DataIsotop$vp2.gts2012)),]$vp2.gts2012 = tmp_gsa2012
# Now all with missing times on Gradstein 2012 is entered.
plot(DataIsotop$vp2.gts2012,DataIsotop$vp2.d13C,xlim=c(540,0))
tmpdata <- data.frame(time=as.numeric(DataIsotop$vp2.gts2012),
d13C=as.numeric(DataIsotop$vp2.d13C),
d18O=as.numeric(DataIsotop$vp2.d18O))
tmpdata <- tmpdata[-which(is.na(tmpdata$d13C)),]
x = tmpdata$time;
y = tmpdata$d13C;
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
# mmc2 is the 'surface' data, which we will use.
# None of these are 'adjusted' in sheet 2.
vp2 <- as.data.frame(read_excel("C:/Users/josteist/Documents/Databases/VeizerProkoph2015/tmpmmc2.xlsx",sheet=2))
tmp2 <- data.frame(vp2$gts2004,vp2$gts2012,vp2$d13C,vp2$d18O,
vp2$`87sr/86Sr`,vp2$fossil,vp2$Location,vp2$climate)
for (jj in 4:(length(excel_sheets("C:/Users/josteist/Documents/Databases/VeizerProkoph2015/tmpmmc2.xlsx")))){
vp2 <- as.data.frame(read_excel("C:/Users/josteist/Documents/Databases/VeizerProkoph2015/tmpmmc2.xlsx",sheet=jj))
tmp <- data.frame(vp2$gts2004,vp2$gts2012,vp2$d13C,vp2$d18O,
vp2$`87sr/86Sr`,vp2$fossil,vp2$Location,vp2$climate)
tmp2 <- rbind(tmp2,tmp)
}
# 1 - Locate all tropical and subtropical datapoints.
Alltropix <- unique(sort(c(grep('trop',unique(tmp2$vp2.climate),ignore.case=T),
grep('equ',unique(tmp2$vp2.climate),ignore.case=T),
grep('Deep',unique(tmp2$vp2.climate),ignore.case=T),
grep('Indik',unique(tmp2$vp2.climate),ignore.case=T))))
# 2. Which of these are subtropical and which are tropical.
subtropix <- intersect(unique(sort(c(grep('strop',unique(tmp2$vp2.climate),ignore.case=T),
grep('subt',unique(tmp2$vp2.climate),ignore.case=T),
grep('-s',unique(tmp2$vp2.climate),ignore.case=T),
grep('trops',unique(tmp2$vp2.climate),ignore.case=T)))),
Alltropix)
unique(tmp2$vp2.climate)[subtropix]
unique(tmp2$vp2.climate)[setdiff(tropix,subtropix)]
tropix <- setdiff(Alltropix,subtropix)
# 3 - Find Artic and antarctic.
arctix <- unique(sort(c(grep('arct',unique(tmp2$vp2.climate),ignore.case=T),
grep('acti',unique(tmp2$vp2.climate),ignore.case=T))))
# 4 - Find temperate.
tempix <- unique(sort(c(grep('temp',unique(tmp2$vp2.climate),ignore.case=T),
grep('mid',unique(tmp2$vp2.climate),ignore.case=T),
grep('medit',unique(tmp2$vp2.climate),ignore.case=T),
grep('Atl-South',unique(tmp2$vp2.climate),ignore.case=T))))
# Are any sets found in more than 1 category?
diff(sort(c(subtropix,tropix,arctix,tempix)))
# Temp-Indik, temperate data from the Indian ocean I presume. Set to temperate
tropix = setdiff(tropix,9)
unique(tmp2$vp2.climate)[9]
tmp2$Climate = NA;
tmp2$Climate[which(tmp2$vp2.climate %in% unique(tmp2$vp2.climate)[tropix])] = 'Tropical'
tmp2$Climate[which(tmp2$vp2.climate %in% unique(tmp2$vp2.climate)[tempix])] = 'Temperate'
tmp2$Climate[which(tmp2$vp2.climate %in% unique(tmp2$vp2.climate)[arctix])] = 'Arctic/Antarctic'
tmp2$Climate[which(tmp2$vp2.climate %in% unique(tmp2$vp2.climate)[subtropix])] = 'Sub-tropical'
table(tmp2$Climate)
# We will only use tropical and sub-tropical (low latitude data)
ix <- c( which(tmp2$Climate=='Tropical'),
which(tmp2$Climate=='Sub-tropical'),
which(tmp2$Climate=='Temperate'))
DataIsotop <- tmp2[ix,];
# Gradstein timescale 2004
GTS2004 <- c(0,0.0115,             0.126,             0.781,             1.806,             2.588,             3.6,             5.332,             7.246,             11.608,             13.65,             15.97,             20.43,             23.03,             28.4,             33.9,             37.2,             40.4,             48.6,             55.8,             58.7,             61.7,             65.5,             70.6,             83.5,             85.8,             89.3,             93.5,             99.6,             112,             125,             130,             136.4,             140.2,             145.5,             150.8,             155.7,             161.2,             164.7,             167.7,             171.6,             175.6,             183,             189.6,             196.5,             199.6,             203.6,             216.5,             228,             237,             245,             249.7,             251,             253.8,             260.4,             265.8,             268,             270.6,             275.6,             284.4,             294.6,             299,             303.9,             306.5,             311.7,             318.1,             326.4,             345.3,             359.2,             374.5,             385.3,             391.8,             397.5,             407,             411.2,             416,             418.7,             421.3,             422.9,             426.2,             428.2,             436,             439,             443.7,             445.6,             455.8,             460.9,             468.1,             471.8,             478.6,             488.3)
# Also the current timescale (GTS 2012) from pbdb
stages = GSA_timescale[GSA_timescale$scale_level==5,]; # Stages.
GTS2012 <- unique(stages[1:91,]$min_ma);
# ONly use the first
which(is.na(DataIsotop$vp2.gts2012))
tmp_gsa2012 <- sapply(which(is.na(DataIsotop$vp2.gts2012)),
function(ii){rescale.time(GTS2004,
GTS2012,DataIsotop$vp2.gts2004[ii])})
DataIsotop[which(is.na(DataIsotop$vp2.gts2012)),]$vp2.gts2012 = tmp_gsa2012
# Now all with missing times on Gradstein 2012 is entered.
plot(DataIsotop$vp2.gts2012,DataIsotop$vp2.d13C,xlim=c(540,0))
tmpdata <- data.frame(time=as.numeric(DataIsotop$vp2.gts2012),
d13C=as.numeric(DataIsotop$vp2.d13C),
d18O=as.numeric(DataIsotop$vp2.d18O))
tmpdata <- tmpdata[-which(is.na(tmpdata$d13C)),]
x = tmpdata$time;
y = tmpdata$d13C;
library(readxl)
dir()
# mmc2 is the 'surface' data, which we will use.
# None of these are 'adjusted' in sheet 2.
vp2 <- as.data.frame(read_excel("C:/Users/josteist/Documents/Databases/VeizerProkoph2015/tmpmmc2.xlsx",sheet=2))
tmp2 <- data.frame(vp2$gts2004,vp2$gts2012,vp2$d13C,vp2$d18O,
vp2$`87sr/86Sr`,vp2$fossil,vp2$Location,vp2$climate)
for (jj in 4:(length(excel_sheets("C:/Users/josteist/Documents/Databases/VeizerProkoph2015/tmpmmc2.xlsx")))){
vp2 <- as.data.frame(read_excel("C:/Users/josteist/Documents/Databases/VeizerProkoph2015/tmpmmc2.xlsx",sheet=jj))
tmp <- data.frame(vp2$gts2004,vp2$gts2012,vp2$d13C,vp2$d18O,
vp2$`87sr/86Sr`,vp2$fossil,vp2$Location,vp2$climate)
tmp2 <- rbind(tmp2,tmp)
}
# 1 - Locate all tropical and subtropical datapoints.
Alltropix <- unique(sort(c(grep('trop',unique(tmp2$vp2.climate),ignore.case=T),
grep('equ',unique(tmp2$vp2.climate),ignore.case=T),
grep('Deep',unique(tmp2$vp2.climate),ignore.case=T),
grep('Indik',unique(tmp2$vp2.climate),ignore.case=T))))
# 2. Which of these are subtropical and which are tropical.
subtropix <- intersect(unique(sort(c(grep('strop',unique(tmp2$vp2.climate),ignore.case=T),
grep('subt',unique(tmp2$vp2.climate),ignore.case=T),
grep('-s',unique(tmp2$vp2.climate),ignore.case=T),
grep('trops',unique(tmp2$vp2.climate),ignore.case=T)))),
Alltropix)
unique(tmp2$vp2.climate)[subtropix]
unique(tmp2$vp2.climate)[setdiff(tropix,subtropix)]
tropix <- setdiff(Alltropix,subtropix)
# 3 - Find Artic and antarctic.
arctix <- unique(sort(c(grep('arct',unique(tmp2$vp2.climate),ignore.case=T),
grep('acti',unique(tmp2$vp2.climate),ignore.case=T))))
# 4 - Find temperate.
tempix <- unique(sort(c(grep('temp',unique(tmp2$vp2.climate),ignore.case=T),
grep('mid',unique(tmp2$vp2.climate),ignore.case=T),
grep('medit',unique(tmp2$vp2.climate),ignore.case=T),
grep('Atl-South',unique(tmp2$vp2.climate),ignore.case=T))))
# Are any sets found in more than 1 category?
diff(sort(c(subtropix,tropix,arctix,tempix)))
# Temp-Indik, temperate data from the Indian ocean I presume. Set to temperate
tropix = setdiff(tropix,9)
unique(tmp2$vp2.climate)[9]
tmp2$Climate = NA;
tmp2$Climate[which(tmp2$vp2.climate %in% unique(tmp2$vp2.climate)[tropix])] = 'Tropical'
tmp2$Climate[which(tmp2$vp2.climate %in% unique(tmp2$vp2.climate)[tempix])] = 'Temperate'
tmp2$Climate[which(tmp2$vp2.climate %in% unique(tmp2$vp2.climate)[arctix])] = 'Arctic/Antarctic'
tmp2$Climate[which(tmp2$vp2.climate %in% unique(tmp2$vp2.climate)[subtropix])] = 'Sub-tropical'
table(tmp2$Climate)
# We will only use tropical and sub-tropical (low latitude data)
ix <- c( which(tmp2$Climate=='Tropical'),
which(tmp2$Climate=='Sub-tropical'),
which(tmp2$Climate=='Temperate'))
DataIsotop <- tmp2[ix,];
# Gradstein timescale 2004
GTS2004 <- c(0,0.0115,             0.126,             0.781,             1.806,             2.588,             3.6,             5.332,             7.246,             11.608,             13.65,             15.97,             20.43,             23.03,             28.4,             33.9,             37.2,             40.4,             48.6,             55.8,             58.7,             61.7,             65.5,             70.6,             83.5,             85.8,             89.3,             93.5,             99.6,             112,             125,             130,             136.4,             140.2,             145.5,             150.8,             155.7,             161.2,             164.7,             167.7,             171.6,             175.6,             183,             189.6,             196.5,             199.6,             203.6,             216.5,             228,             237,             245,             249.7,             251,             253.8,             260.4,             265.8,             268,             270.6,             275.6,             284.4,             294.6,             299,             303.9,             306.5,             311.7,             318.1,             326.4,             345.3,             359.2,             374.5,             385.3,             391.8,             397.5,             407,             411.2,             416,             418.7,             421.3,             422.9,             426.2,             428.2,             436,             439,             443.7,             445.6,             455.8,             460.9,             468.1,             471.8,             478.6,             488.3)
# Also the current timescale (GTS 2012) from pbdb
stages = GSA_timescale[GSA_timescale$scale_level==5,]; # Stages.
GTS2012 <- unique(stages[1:91,]$min_ma);
# ONly use the first
which(is.na(DataIsotop$vp2.gts2012))
tmp_gsa2012 <- sapply(which(is.na(DataIsotop$vp2.gts2012)),
function(ii){rescale.time(GTS2004,
GTS2012,DataIsotop$vp2.gts2004[ii])})
DataIsotop[which(is.na(DataIsotop$vp2.gts2012)),]$vp2.gts2012 = tmp_gsa2012
# Now all with missing times on Gradstein 2012 is entered.
library(Compadre)
# Gradstein timescale 2004
GTS2004 <- c(0,0.0115,             0.126,             0.781,             1.806,             2.588,             3.6,             5.332,             7.246,             11.608,             13.65,             15.97,             20.43,             23.03,             28.4,             33.9,             37.2,             40.4,             48.6,             55.8,             58.7,             61.7,             65.5,             70.6,             83.5,             85.8,             89.3,             93.5,             99.6,             112,             125,             130,             136.4,             140.2,             145.5,             150.8,             155.7,             161.2,             164.7,             167.7,             171.6,             175.6,             183,             189.6,             196.5,             199.6,             203.6,             216.5,             228,             237,             245,             249.7,             251,             253.8,             260.4,             265.8,             268,             270.6,             275.6,             284.4,             294.6,             299,             303.9,             306.5,             311.7,             318.1,             326.4,             345.3,             359.2,             374.5,             385.3,             391.8,             397.5,             407,             411.2,             416,             418.7,             421.3,             422.9,             426.2,             428.2,             436,             439,             443.7,             445.6,             455.8,             460.9,             468.1,             471.8,             478.6,             488.3)
# Also the current timescale (GTS 2012) from pbdb
stages = GSA_timescale[GSA_timescale$scale_level==5,]; # Stages.
GTS2012 <- unique(stages[1:91,]$min_ma);
# ONly use the first
which(is.na(DataIsotop$vp2.gts2012))
tmp_gsa2012 <- sapply(which(is.na(DataIsotop$vp2.gts2012)),
function(ii){rescale.time(GTS2004,
GTS2012,DataIsotop$vp2.gts2004[ii])})
DataIsotop[which(is.na(DataIsotop$vp2.gts2012)),]$vp2.gts2012 = tmp_gsa2012
# Now all with missing times on Gradstein 2012 is entered.
tmp_gsa2012 <- sapply(which(is.na(DataIsotop$vp2.gts2012)),
function(ii){rescale_time(GTS2004,
GTS2012,DataIsotop$vp2.gts2004[ii])})
DataIsotop[which(is.na(DataIsotop$vp2.gts2012)),]$vp2.gts2012 = tmp_gsa2012
plot(DataIsotop$vp2.gts2012,DataIsotop$vp2.d13C,xlim=c(540,0))
tmpdata <- data.frame(time=as.numeric(DataIsotop$vp2.gts2012),
d13C=as.numeric(DataIsotop$vp2.d13C),
d18O=as.numeric(DataIsotop$vp2.d18O))
tmpdata <- tmpdata[-which(is.na(tmpdata$d13C)),]
x = tmpdata$time;
y = tmpdata$d13C;
plot(x,y)
# hwf to select these? the General cross validation value goes
# down, but how low can you go, lizm?
# Is setting k = -1 it optimizes it seems
gm1 <- gam(y~s(x,k=9))
gm2 <- gam(y~s(x,k=90))
gm3 <- gam(y~s(x,k=900))
gm4 <- gam(y~s(x,k=-1))
plot(gm1,ylim=c(-8,10))
points(x,y,col=rgb(0.1,0.1,0.1,0.1))
pre1 <- predict.gam(gm1,newdata=list(x=0:540))
pre2 <- predict.gam(gm2,newdata=list(x=0:540))
pre3 <- predict.gam(gm3,newdata=list(x=0:540))
pre4 <- predict.gam(gm4,newdata=list(x=0:540))
plot(x,y,col=rgb(0.1,0.1,0.1,0.5),pch=16)
lines(0:540,pre1,type="l",col='red',lwd=2,lty=2)
lines(0:540,pre2,type="l",col='green',lwd=2,lty=3)
lines(0:540,pre3,type="l",col='blue',lwd=2,lty=4)
lines(0:540,pre4,type="l",col='yellow',lwd=2)
library(mcgv)
?mgcv
library(,mgc)
library(mgcv)
plot(x,y)
# hwf to select these? the General cross validation value goes
# down, but how low can you go, lizm?
# Is setting k = -1 it optimizes it seems
gm1 <- gam(y~s(x,k=9))
gm2 <- gam(y~s(x,k=90))
gm3 <- gam(y~s(x,k=900))
gm4 <- gam(y~s(x,k=-1))
plot(gm1,ylim=c(-8,10))
points(x,y,col=rgb(0.1,0.1,0.1,0.1))
pre1 <- predict.gam(gm1,newdata=list(x=0:540))
pre2 <- predict.gam(gm2,newdata=list(x=0:540))
pre3 <- predict.gam(gm3,newdata=list(x=0:540))
pre4 <- predict.gam(gm4,newdata=list(x=0:540))
plot(x,y,col=rgb(0.1,0.1,0.1,0.5),pch=16)
lines(0:540,pre1,type="l",col='red',lwd=2,lty=2)
lines(0:540,pre2,type="l",col='green',lwd=2,lty=3)
lines(0:540,pre3,type="l",col='blue',lwd=2,lty=4)
lines(0:540,pre4,type="l",col='yellow',lwd=2)
# Well I wouldn't say that the optimal
plot(x,y,col=rgb(0.1,0.1,0.1,0.5),pch=16)
lines(0:540,pre1,type="l",col='red',lwd=2,lty=1)
lines(0:540,pre2,type="l",col='green',lwd=2,lty=1)
lines(0:540,pre3,type="l",col='blue',lwd=2,lty=1)
lines(0:540,pre4,type="l",col='yellow',lwd=2)
plot(x,y,col=rgb(0.1,0.1,0.1,0.5),pch=16,xlim=c(540,0))
lines(0:540,pre1,type="l",col='red',lwd=2,lty=1)
lines(0:540,pre2,type="l",col='green',lwd=2,lty=1)
lines(0:540,pre3,type="l",col='blue',lwd=2,lty=1)
lines(0:540,pre4,type="l",col='yellow',lwd=2)
dev.off()
plot(x,y,col=rgb(0.1,0.1,0.1,0.5),pch=16,xlim=c(540,0))
lines(0:540,pre1,type="l",col='red',lwd=2,lty=1)
lines(0:540,pre2,type="l",col='green',lwd=2,lty=1)
lines(0:540,pre3,type="l",col='blue',lwd=2,lty=1)
lines(0:540,pre4,type="l",col='yellow',lwd=2)
dim(DataIsotop)
dev.off()
head(DataIsopt)
head(DataIsotop)
stages$min_ma
S1
library(Compadre)
library(mvtnorm)
S2 <- sim_BD_func_v2(spec=function(t,n){.23+sin(t)*0.1},#max(1e-8,0.8-0.1*log(n))},
ext = function(t,n){.2+sin(t-pi/2)*0.07},#0.4-.3*(t>12)},
samp = function(t,n){3.3},n_init=100,
dt_ints=rep(0.5,3))#rep(c(.5,4),6))
dim(S2$FosRec)
NROW(S2$FosRec)
S1 <- sim_BD_func_v2(spec=function(t,n){.53+sin(t)*0.3},#max(1e-8,0.8-0.1*log(n))},
ext = function(t,n){.4+sin(t-pi/2)*0.07},#0.4-.3*(t>12)},
samp = function(t,n){3.3},n_init=100,
dt_ints=rep(0.5,5))#rep(c(.5,4),6))
m1 <- make_BayesCMR(S1$FosRec>0,dts=S1$dts)
m1$probfun
f1 <- MCMC_CMR(m1)
plot(f1)
m1$ratefunc[[1]]
m1$likfun
rescale_time
rescale.time
setwd("C:/Users/josteist/Documents/Compadre")
document()
library(devtools)
document()
setwd("C:/Users/josteist/Documents/")
install('Compadre')
install('Compadre')
remove.packages('Compadre')
setwd("C:/Users/josteist/Documents/Compadre")
document()
setwd("C:/Users/josteist/Documents/")
install('Compadre')
setwd("C:/Users/josteist/Documents/Compadre")
document()
setwd("C:/Users/josteist/Documents/Compadre")
document()
library(devtools)
document()
setwd("C:/Users/josteist/Documents/")
install('Compadre')
S1 <- sim_BD_func_v2(spec=function(t,n){.53+sin(t)*0.3},#max(1e-8,0.8-0.1*log(n))},
ext = function(t,n){.4+sin(t-pi/2)*0.07},#0.4-.3*(t>12)},
samp = function(t,n){3.3},n_init=100,
dt_ints=rep(0.5,5))#rep(c(.5,4),6))
m1 <- make_BayesCMR(S1$FosRec>0,dts=S1$dts)
m1$likfun
colSums(S1$FosRec>0)
S1$Taxa
hist(replicate(100,rexp(1e4,0.3*3)<3))
?rexp
hist(replicate(100,sum(rexp(1e4,0.3*3)<3)))
hist(replicate(100,sum(rexp(1e4,0.3)<2)))
4500/exp(-0.3*2)
rate2prob(0.3,3)
rate2prob(0.3,2)
exp(-.3*2)
4500/(1-exp(-0.3*2))
