boxplot(sapply(1:6,function(ii){fitsL[[ii]]$Chain[us,1]}))
boxplot(sapply(1:6,function(ii){fitsL[[ii]]$Chain[use,1]}))
par(mfcol=c(2,2))
for (ll in 1:4){
plot(fitsL[[1]]$Chain[,ll],type="l",col=rgb(0.2,0.2,0.2,0.3),ylim=c(-3,1),ylab='',log='x',main=paste('No intervals = ',as.character(jj)),xlim=c(100,1e5))
for (ii in 2:6){
lines(fitsL[[ii]]$Chain[,ll],type="l",col=rgb(0.2,0.2,0.2,0.3))
}
}
length(fitsL)
J <- makeMod(10,stages)
clusterExport(cl,c("J"))
myParlfun1 <- function(vmin){
fit<-MCMC_CMR(J$modhfn,x=runif(J$modhfn$npar,min=-1,max=0),niter=5e5,noblc = 100,
vmin=vmin,cvstp=diag(1e-3,J$modhfn$npar))
}
fitsL <- parLapply(cl,10^(seq(-8,-3,by=1)),myParlfun1)
boxplot(sapply(1:6,function(ii){fitsL[[ii]]$Chain[use,1]}))
for (ll in 1:3){
plot(fitsL[[1]]$Chain[,ll],type="l",col=rgb(0.2,0.2,0.2,0.3),ylim=c(-3,1),ylab='',log='x',main=paste('No intervals = ',as.character(jj)),xlim=c(100,1e5))
for (ii in 2:6){
lines(fitsL[[ii]]$Chain[,ll],type="l",col=rgb(0.2,0.2,0.2,0.3))
}
}
par(mfcol=c(3,2))
for (ll in 1:3){
plot(fitsL[[1]]$Chain[,ll],type="l",col=rgb(0.2,0.2,0.2,0.3),ylim=c(-3,1),ylab='',log='x',main=paste('No intervals = ',as.character(jj)),xlim=c(100,1e5))
for (ii in 2:6){
lines(fitsL[[ii]]$Chain[,ll],type="l",col=rgb(0.2,0.2,0.2,0.3))
}
}
plot(fitsL[[1]]$Chain[use,ll],type="l",col=rgb(0.2,0.2,0.2,0.3),ylim=c(-3,1),ylab='',log='x',main=paste('No intervals = ',as.character(jj)),xlim=c(100,1e5))
par(mfrow=c(3,2))
for (ll in 1:3){
plot(fitsL[[1]]$Chain[,ll],type="l",col=rgb(0.2,0.2,0.2,0.3),ylim=c(-3,1),ylab='',log='x',main=paste('No intervals = ',as.character(jj)),xlim=c(100,1e5))
for (ii in 2:6){
lines(fitsL[[ii]]$Chain[,ll],type="l",col=rgb(0.2,0.2,0.2,0.3))
}
boxplot(sapply(1:6,function(ii){fitsL[[ii]]$Chain[use,1]}))
}
for (ll in c(1,4,12)){
plot(fitsL[[1]]$Chain[,ll],type="l",col=rgb(0.2,0.2,0.2,0.3),ylim=c(-3,1),ylab='',log='x',main=paste('No intervals = ',as.character(jj)),xlim=c(100,1e5))
for (ii in 2:6){
lines(fitsL[[ii]]$Chain[,ll],type="l",col=rgb(0.2,0.2,0.2,0.3))
}
boxplot(sapply(1:6,function(ii){fitsL[[ii]]$Chain[use,ll]}))
}
10^(seq(-8,-3,by=1))
J <- makeMod(11,stages)
clusterExport(cl,c("J"))
myParlfun1 <- function(vmin){
fit<-MCMC_CMR(J$modhfn,x=runif(J$modhfn$npar,min=-1,max=0),niter=5e5,noblc = 100,
vmin=vmin,cvstp=diag(1e-3,J$modhfn$npar))
}
fitsL <- parLapply(cl,10^(seq(-8,-3,by=1)),myParlfun1)
use = seq((dim(fitsL[[ii]]$Chain)[1])/2,(dim(fitsL[[ii]]$Chain)[1]),by=10)
par(mfrow=c(3,2))
#
for (ll in c(1,4,12)){
plot(fitsL[[1]]$Chain[,ll],type="l",col=rgb(0.2,0.2,0.2,0.3),ylim=c(-3,1),ylab='',log='x',main=paste('No intervals = ',as.character(jj)),xlim=c(100,1e5))
for (ii in 2:6){
lines(fitsL[[ii]]$Chain[,ll],type="l",col=rgb(0.2,0.2,0.2,0.3))
}
boxplot(sapply(1:6,function(ii){fitsL[[ii]]$Chain[use,ll]}))
}
rm(list=ls())
setwd('C:/Users/josteist/Documents/R/JoSH')
load('jstar.RData')
m1 <- make_BayesCMR(j_star_Obs,dts=jsta_dts,spec=~time,ext=~1,samp=~1)
m1 <- make_BayesCMR(j_star_Obs,dts=jstar_dts,spec=~time,ext=~1,samp=~1)
m1 <- make_BayesCMR(jstar_Obs,dts=jstar_dts,spec=~time,ext=~1,samp=~1)
# Testing JoSH
setwd('C:/Users/josteist/Documents/R/JoSH')
load('jstar.RData')
m1 <- make_BayesCMR(jstar_Obs,dts=jstar_dts,spec=~time,ext=~1,samp=~1)
f1 <- MCMC_CMR(m1,niter=1e5)
f1
summary(f1)
checkchains(f1)
plot(f1)
plot(colSums(jstar_Obs),type="l")
m1 <- make_BayesCMR(jstar_Obs,dts=jstar_dts,spec=~time,ext=~time,samp=~time)
m2 <- make_BayesCMR_halfnormpri(jstar_Obs,dts=jstar_dts,spec=~time,ext=~time,samp=~time)
m3 <- make_BayesCMR_normpri(jstar_Obs,dts=jstar_dts,spec=~time,ext=~time,samp=~time)
f1 <- MCMC_CMR(m1,niter=1e5)
checkchains(f1)
f1 <- MCMC_CMR(m1,niter=1e5,vmin=1e-6,cvstp=diag(1e-3,m1$npar))
checkchains(f1)
f1 <- MCMC_CMR(m1,niter=5e5,vmin=1e-6,cvstp=diag(1e-3,m1$npar))
summary(f1)
plot(f1)
checkchains(f1)
tmp <- plot(f1)
apply(tmp$SpecRates,1,median)
plot(apply(tmp$SpecRates,1,median))
plot(colSums(jstar_Obs),apply(tmp$SpecRates,1,median))
plot(colSums(jstar_Obs)[-18],apply(tmp$SpecRates,1,median))
dev.off()
plot(colSums(jstar_Obs)[-18],apply(tmp$SpecRates,1,median))
plot(colSums(jstar_Obs)[-18],apply(tmp$ExtRates,1,median))
f2 <- MCMC_CMR(m2,niter=2e5,vmin=1e-6,cvstp=diag(1e-3,m1$npar))
f2 <- MCMC_CMR(m2,niter=5e5,vmin=1e-6,cvstp=diag(1e-3,m1$npar))
f3 <- MCMC_CMR(m3,niter=5e5,vmin=1e-6,cvstp=diag(1e-3,m1$npar))
checkchains(f1)
checkchains(f2)
checkchains(f)
checkchains(f3)
tmp1 <- plot(f1)
tmp2 <- plot(f2)
tmp3 <- plot(f3)
apply(tmp1$SpecRates,1,median)
matplot(cbind(apply(tmp1$SpecRates,1,median),
apply(tmp2$SpecRates,1,median),
apply(tmp3$SpecRates,1,median)),type="l")
checkchains(f3)
plot(f3)
plot(f1)
matplot(cbind(apply(tmp1$SpecRates,1,median),
apply(tmp2$SpecRates,1,median),
apply(tmp3$SpecRates,1,median)),type="l")
summary(f2)
summary(f3)
matplot(cbind(f1$Chain[,1],f2$Chain[,2],f3$Chain[,3]),type="l")
matplot(cbind(f1$Chain[,1],f2$Chain[,1],f3$Chain[,1]),type="l")
matplot(cbind(apply(tmp1$SpecRates,1,median),
apply(tmp2$SpecRates,1,median),
apply(tmp3$SpecRates,1,median)),type="l")
ix =3
matplot(cbind(f1$Chain[,ix],f2$Chain[,ix],f3$Chain[,ix]),type="l")
ix =15
matplot(cbind(f1$Chain[,ix],f2$Chain[,ix],f3$Chain[,ix]),type="l")
boxplot(tmp1$SpecRates)
boxplot(t(tmp1$SpecRates))
boxplot(t(tmp2$SpecRates))
boxplot(t(tmp3$SpecRates))
matplot(cbind(apply(tmp1$ExtRates,1,median),
apply(tmp2$ExtRates,1,median),
apply(tmp3$ExtRates,1,median)),type="l")
f1
f2
f3
ESS(f1)
dev.off()
checkchains(f1)
checkchains(f2)
matplot(f2$Chain[,4:6],type="l")
matplot(f1$Chain[,4:6],type="l")
matplot(f3$Chain[,4:6],type="l")
##### ==== Testing vmins cvstps ====
library(parallel)
# stopCluster(cl)
m3 <- make_BayesCMR_normpri(jstar_Obs,dts=jstar_dts,spec=~time,ext=~time,samp=~time)
cl <- makeCluster(6)
clusterEvalQ(cl,library(Compadre))
clusterExport(cl,c("m3"))
myParlfun1 <- function(vmin){
fit<-MCMC_CMR(m3,x=runif(m3$npar,min=-1,max=0),niter=1e5,noblc = 100,
vmin=vmin,cvstp=diag(1e-3,J$modhfn$npar))
}
fitsL <- parLapply(cl,10^(seq(-8,-3,by=1)),myParlfun1)
myParlfun1 <- function(vmin){
fit<-MCMC_CMR(m3,x=runif(m3$npar,min=-1,max=0),niter=1e5,noblc = 100,
vmin=vmin,cvstp=diag(1e-3,m3$npar))
}
fitsL <- parLapply(cl,10^(seq(-8,-3,by=1)),myParlfun1)
summary(fitsL[[1]])
summary(fitsL[[2]])
summary(fitsL[[3]])
summary(fitsL[[4]])
checkchains(fitsL[[1]])
checkchains(fitsL[[5]])
myParlfun1 <- function(vmin){
fit<-MCMC_CMR(m3,x=runif(m3$npar,min=-1,max=0),niter=5e5,noblc = 500,
vmin=vmin,cvstp=diag(1e-3,m3$npar))
}
fitsL <- parLapply(cl,1e-5,myParlfun1)
summary(fitsL[[1]])
checkchains<(fitsL[[1]])
checkchains(fitsL[[1]])
checkchains(fitsL[[5]]])
checkchains(fitsL[[5]])
myParlfun1 <- function(vmin){
fit<-MCMC_CMR(m3,x=runif(m3$npar,min=-1,max=0),niter=1e6,noblc = 500,nthin = 100,
vmin=vmin,cvstp=diag(1e-3,m3$npar))
}
fitsL <- parLapply(cl,1e-6,myParlfun1)
summary(fitsL[[1]])
checkchains(fitsL[[1]])
checkchains(fitsL[[2]])
fitsL
fitsL[[1]]
plot(fitsL[[1]])
checkchsin(fitsL[[1]])
checkchains(fitsL[[1]])
myParlfun1 <- function(vmin){
fit<-MCMC_CMR(m3,x=runif(m3$npar,min=-1,max=0),niter=1e6,noblc = 100,nthin = 100,
vmin=vmin,cvstp=diag(1e-3,m3$npar))
}
fitsL <- parLapply(cl,rep(1e-5,6),myParlfun1)
make_BayesCMR_halfnormpri
m2
m2$probfun
m2$priorf()
m2$priorf
matplot(exp(f2$Chain[,4:6]),type="l")
m2b <- make_BayesCMR_halfnormpri(jstar_Obs,dts=jstar_dts,spec=~time,ext=~time,samp=~time,priorsHalfNorm_Var = 1)
f2b <- MCMC_CMR(m2b,niter=5e5,vmin=1e-6,cvstp=diag(1e-3,m1$npar))
summary(f2b)
summary(f2)
matplot(f2$Chain[,4:6],type="l")
matplot(exp(f2b$Chain[,4:6]),type="l")
plot(f2)
plot(f2b)
tmp2 <- plot(f2)
tmp2b <- plot(f2b)
apply(tmp2$SpecRates,1,median)
apply(tmp2b$SpecRates,1,median)
boxplot(tmp2$SpecRates)
boxplot(t(tmp2$SpecRates))
par(mfrow=c(2,1))
boxplot(t(tmp2$SpecRates))
par(mfrow=c(1,2))
boxplot(t(tmp2$SpecRates))
boxplot(t(tmp2b$SpecRates))
plot(f3)
plot(f2b)
apply(tmp2b$SampRates,1,median)
apply(tmp3$SampRates,1,median)
checkchains(f2b)
checkchains(f2)
stopCluster(cl)
head(jstar_drivers)
dim(jstar_obs)
dim(jstar_Obs)
head(jstar_Obs)
jstar_drivers
m2d <- make_BayesCMR_halfnormpri(jstar_Obs,dts=jstar_dts,spec=~time+median_brachydont_all,
ext=~time+median_brachydont_all,samp=~time,priorsHalfNorm_Var = 1,
data=jstar_drivers)
m2d <- make_BayesCMR_halfnormpri(jstar_Obs,dts=jstar_dts,
spec=~time+median_brachydonty_all,
ext=~time+median_brachydonty_all,samp=~time,priorsHalfNorm_Var = 1,
data=jstar_drivers)
cl <- makeCluster(6)
clusterEvalQ(cl,library(Compadre))
clusterExport(cl,c("m2d"))
myParlfun1 <- function(vmin){
fit<-MCMC_CMR(m2d,x=runif(m2d$npar,min=-1,max=0),niter=5e6,noblc = 100,nthin = 100,
vmin=vmin,cvstp=diag(1e-3,m2d$npar))
}
fitsL <- parLapply(cl,rep(1e-5,6),myParlfun1)
checkchains(fitsL[[1]])
checkchains(fitsL[[2]])
checkchains(fitsL[[3]])
checkchains(fitsL[[4]])
summary(fitsL[[1]])
summary(fitsL[[2]])
summary(fitsL[[3]])
t <- summary(fitsL[[3]])
t
t$SpecStat
t <- sapply(1:6,function(ii){summary(fitsL[[ii]]$SpecStat)})
t
t[,1]
t[[1]]
t[[2]]
t <- sapply(1:6,function(ii){summary(fitsL[[ii]])$SpecStat})
t
t <- sapply(1:6,function(ii){summary(fitsL[[ii]])$ExtStat})
dir()
setwd('C:/Users/josteist/Documents/R/Compadre')
document()
library(devtools)
document()
remove.packages('Compadre')
setwd('C:/Users/josteist/Documents/R')
install('Compadre')
install('Compadre')
library(Compadre)
summary(fitsL[[1]])
plot(fitsL[[1]],plot=F)
plot(fitsL[[1]],plot=FALSE)
is(plot)
setwd('C:/Users/josteist/Documents/R/Compadre')
document()
setwd('C:/Users/josteist/Documents/R')
install('Compadre')
library(Compadre)
plot(fitsL[[1]],drawplot=FALSE)
plotRates
plotRates(fitsL[[1]])
plotRates(fitsL[[1]],drawplot=FALSE)
plot(fitsL[[1]],drawplot=FALSE)
setwd('C:/Users/josteist/Documents/R')
setwd('C:/Users/josteist/Documents/R/Compadre')
document()
setwd('C:/Users/josteist/Documents/R')
install('Compadre')
library(Compadre)
plot(fitsL[[1]])
plot(fitsL[[3]])
plot(fitsL[[3]],drawplot=F)
t <- plot(fitsL[[3]],drawplot=FALSE)
t
rm(t)
t
t <- plot(fitsL[[3]],drawplot=FALSE)
t
t <- plot(fitsL[[3]],drawplot=F)
?plot
?plot.CMR_fit.R
plot.CMR_fit.R
setwd('C:/Users/josteist/Documents/R/Compadre')
document()
setwd('C:/Users/josteist/Documents/R')
install('Compadre')
plot(fitsL[[3]],drawplot=F)
#' Extract and plot macroevolutionary rates from a CMR model fit.
#'
#' @param cmrfit A model fit, as output from \link{MCMC_CMR}
#' @param max_ma (optional) a maximum age for the oldest interval, if not given assumed to be sum of all interval durations in cmrfit
#' @param stages (optional) a data.frame of stages used for the analysis. Values max_ma,min_ma and colors are used to color the plot.
#' @param logax (T/F), use log y-axis for plotting
#' @param draws number of samples drawn from the MCMC chain (single number). Alternatively could be set of values indexing into the MCMC-chain.
#' @param qauntiles gives the upper and lower quantiles for plotting bars around median, and the centre. Defaults to c(0.025,0.5,0.975).
#' @param drawplot (T/F) if plot figure, defaults to TRUE.
#' @return returns a list of three matrices with sampled rates; $SpecRates, $ExtRates and $SampRates.
#' @export
plotRates <- function(cmrfit,max_ma= NULL,stages =NULL,logax = T,draws = 250,quantiles = c(0.025,0.5,0.975),drawplot=TRUE,cladenames=NULL){
# have max_ma as input instead of stgs, and possibly a list of colors.
# thus boundaries are max_ma+c(0,cumsum(cmrfit$Model$dts))
# also store par(stuff) and return settings to old after plott.
# plpars <- par();
olp <- par(no.readonly = TRUE);
on.exit(par(olp))
if (!is.null(stages)){
# If stages are given, take the max as the xmax
max_ma = max(stages$max_ma)
}
if (logax){
tmpl = 'y'
} else {
tmpl = ''
}
if (is.null(cmrfit$Model$Clade1Mod)){
if (is.null(max_ma)){max_ma =     sum(cmrfit$Model$dts)}
bnds <- rev(max_ma+c(0,cumsum(rev(cmrfit$Model$dts))))-sum(cmrfit$Model$dts);
if (length(draws)==1){
tpl <- ceiling(seq(dim(cmrfit$Chain)[1]/2,dim(cmrfit$Chain)[1],length.out=draws));
} else {
tpl = draws
}
par(mfrow=c(3,1),mar=c(2,4,.2,1))
# extracting spc rate quantile
spec_smps <- exp((sapply(1:length(tpl),function(ii){
cmrfit$Model$specfun(cmrfit$Chain[tpl[ii],])})))
tmp <- apply(spec_smps,1,
mf<-function(k){quantile(k,quantiles)})
if (drawplot){
if (is.null(stages)){
# if stages not given
plot(bnds[-c(1,length(bnds))],tmp[2,],type="o",lty=0,col='black',pch=19,
xlim = c(max(bnds)+3,min(bnds-3)),xaxt='n',
log=tmpl,ylab='Speciation rate',
ylim=c(min(tmp)*0.9,max(tmp)*1.1))
# axis(1,at=bnds[round(seq(1,length(bnds),length.out=5))])
} else {
# MAKE THE SHADING HERE...
plot(1000,1000,         xlim = c(max(bnds)+3,min(bnds-3)),xaxt='n',
log=tmpl,ylab='Speciation rate',
ylim=c(min(tmp)*0.9,max(tmp)*1.1))
for (ii in 1:dim(stages)[1]){
if (par("ylog") ){
rect(stages[ii,]$min_ma,10^(par("usr")[3]),
stages[ii,]$max_ma,10^(par("usr")[4]),
col=toString(paste(stages[ii,]$color,'44',sep='')),border=NA)
} else {
rect(stages[ii,]$min_ma,(par("usr")[3]),
stages[ii,]$max_ma,(par("usr")[4]),
col=toString(paste(stages[ii,]$color,'44',sep='')),border=NA)
}
}
lines(bnds[-c(1,length(bnds))],tmp[2,],
type="o",lty=0,col='black',pch=19)
}
for (ii in 1:dim(tmp)[2]){
lines(rep(bnds[ii+1],2),
tmp[c(1,3),ii])
}
abline(v=bnds,col=rgb(0.1,0.1,0.1,0.1))
}
# extinction quantile
ext_smps <- exp((sapply(1:length(tpl),function(ii){
cmrfit$Model$extfun(cmrfit$Chain[tpl[ii],])})))
tmp <- apply(ext_smps,1,
mf<-function(k){quantile(k,quantiles)})
if (drawplot){
if (is.null(stages)){
# if stages not given
plot(bnds[-c(1,length(bnds))],tmp[2,],type="o",lty=0,col='black',pch=19,
xlim = c(max(bnds)+3,min(bnds-3)),xaxt='n',
log=tmpl,ylab='Extinction rate',
ylim=c(min(tmp)*0.9,max(tmp)*1.1))
# axis(1,at=bnds[round(seq(1,length(bnds),length.out=5))])
} else {
# MAKE THE SHADING HERE...
plot(1000,1000,         xlim = c(max(bnds)+3,min(bnds-3)),xaxt='n',
log=tmpl,ylab='Extinction rate',
ylim=c(min(tmp)*0.9,max(tmp)*1.1))
for (ii in 1:dim(stages)[1]){
if (par("ylog") ){
rect(stages[ii,]$min_ma,10^(par("usr")[3]),
stages[ii,]$max_ma,10^(par("usr")[4]),
col=toString(paste(stages[ii,]$color,'44',sep='')),border=NA)
} else {
rect(stages[ii,]$min_ma,(par("usr")[3]),
stages[ii,]$max_ma,(par("usr")[4]),
col=toString(paste(stages[ii,]$color,'44',sep='')),border=NA)
}
}
lines(bnds[-c(1,length(bnds))],tmp[2,],
type="o",lty=0,col='black',pch=19)
}
for (ii in 1:dim(tmp)[2]){
# lines(rep(rev((stgs$max_ma))[ii+1],2),
lines(rep(bnds[ii+1],2),
tmp[c(1,3),ii])
}
abline(v=bnds,col=rgb(0.1,0.1,0.1,0.1))
}
# sampling quantiles
smp_smps <- exp((sapply(1:length(tpl),function(ii){
cmrfit$Model$sampfun(cmrfit$Chain[tpl[ii],])})))
tmp <- apply(smp_smps,1,
mf<-function(k){quantile(k,quantiles)})
if (drawplot){
if (is.null(stages)){
# if stages not given
plot((bnds[-1]+bnds[-length(bnds)])/2,tmp[2,],type="o",lty=0,col='black',pch=19,
xlim = c(max(bnds)+3,min(bnds-3)),xaxt='n',
log=tmpl,ylab='Sampling rate',
ylim=c(min(tmp)*0.9,max(tmp)*1.1))
axis(1,at=bnds[round(seq(1,length(bnds),length.out=5))])
} else {
# MAKE THE SHADING HERE...
plot(1000,1000,         xlim = c(max(bnds)+3,min(bnds-3)),xaxt='n',
log=tmpl,ylab='Sampling rate',
ylim=c(min(tmp)*0.9,max(tmp)*1.1))
for (ii in 1:dim(stages)[1]){
if (par("ylog") ){
rect(stages[ii,]$min_ma,10^(par("usr")[3]),
stages[ii,]$max_ma,10^(par("usr")[4]),
col=toString(paste(stages[ii,]$color,'44',sep='')),border=NA)
} else {
rect(stages[ii,]$min_ma,(par("usr")[3]),
stages[ii,]$max_ma,(par("usr")[4]),
col=toString(paste(stages[ii,]$color,'44',sep='')),border=NA)
}
}
lines((bnds[-1]+bnds[-length(bnds)])/2,tmp[2,],
type="o",lty=0,col='black',pch=19)
axis(1,at=bnds[round(seq(1,length(bnds),length.out=5))])
#
# }
}
for (ii in 1:dim(tmp)[2]){
lines(rep(((bnds[-1]+bnds[-length(bnds)])/2)[ii],2),
tmp[c(1,3),ii])
}
abline(v=bnds,col=rgb(0.1,0.1,0.1,0.1))
if (!is.null(stages)){
colbottom(stages)
}
}
out <- list(SpecRates= spec_smps,ExtRates = ext_smps,SampRates = smp_smps)
} else {
# Two clade model. Make two rate plots.
if (is.null(max_ma)){max_ma =     sum(cmrfit$Model$Clade2Mod$dts)}
bnds <- rev(max_ma+c(0,cumsum(rev(cmrfit$Model$Clade2Mod$dts))))-sum(cmrfit$Model$Clade2Mod$dts);
# if (is.null(max_ma)){max_ma =     sum(cmrfit$Model$Clade1Mod$dts)}
# # if (is.null(max_ma)){max_ma =     sum(cmrfit$Model$dts)}
# bnds <- rev(max_ma+c(0,cumsum(rev(cmrfit$Model$dts))))-sum(cmrfit$Model$dts);
#
# plotfun_internal <- function(spec_smps,ext_smps,smp_smps,bnds,tmpl,stages,quantiles=c(0.025,0.5,0.975)){
tpl <- round(seq(dim(cmrfit$Chain)[1]/2,dim(cmrfit$Chain)[1],length.out=250))
# f12$Model$lspecfun1(f12$Chain[1,])
spec_smps1 <- exp((sapply(1:length(tpl),function(ii){      cmrfit$Model$lspecfun1(cmrfit$Chain[tpl[ii],])})))
ext_smps1  <- exp((sapply(1:length(tpl),function(ii){      cmrfit$Model$lextfun1(cmrfit$Chain[tpl[ii],])})))
smp_smps1  <- exp((sapply(1:length(tpl),function(ii){      cmrfit$Model$lsampfun1(cmrfit$Chain[tpl[ii],])})))
spec_smps2 <- exp((sapply(1:length(tpl),function(ii){      cmrfit$Model$lspecfun2(cmrfit$Chain[tpl[ii],])})))
ext_smps2  <- exp((sapply(1:length(tpl),function(ii){      cmrfit$Model$lextfun2(cmrfit$Chain[tpl[ii],])})))
smp_smps2  <- exp((sapply(1:length(tpl),function(ii){      cmrfit$Model$lsampfun2(cmrfit$Chain[tpl[ii],])})))
par(mfrow=c(3,1),mar=c(2,4,3,1))
if (is.null(cladenames)){cladenames = list('Clade 1','Clade 2')}
invisible(plotfun_internal(spec_smps1,ext_smps1,smp_smps1,bnds,tmpl,stages,drawplot=drawplot,quantiles=quantiles,main=cladenames[[1]]))
invisible(plotfun_internal(spec_smps2,ext_smps2,smp_smps2,bnds,tmpl,stages,drawplot=drawplot,quantiles=quantiles,main=cladenames[[2]]))
out <- list(SpecRates1= spec_smps1,ExtRates1 = ext_smps1,SampRates1 = smp_smps1,
SpecRates2= spec_smps2,ExtRates2 = ext_smps2,SampRates2 = smp_smps2);
}
return(invisible(out))
}
plotRates(fitsL[[1]],drawplot=FALSE)
tmp <- plotRates(fitsL[[1]],drawplot=FALSE)
tmp
dim(tmp$SpecRates)
library(devtools)
setwd('C:/Users/josteist/Documents/R/Compadre')
document()
devtools::check()
setwd('C:/Users/josteist/Documents/R')
install('Compadre')
library(Compadre)
